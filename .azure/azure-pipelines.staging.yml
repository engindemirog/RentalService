trigger:
  branches:
    include:
      - staging

pool:
  vmImage: 'ubuntu-latest'

variables:
  dotnetConfiguration: 'Debug'
  dotnetSolution: '$(System.DefaultWorkingDirectory)/RentalService.sln'
  dotnetStartupProject: '$(System.DefaultWorkingDirectory)/src/rentalService/WebAPI/WebAPI.csproj'
  dotnetEnvironmentName: 'Staging'

steps:
- script: git submodule update --init --recursive
  name: 'DownloadGitSubmodules'
  displayName: 'Download Git Submodules'

- task: NuGetToolInstaller@1
  name: 'InstallNuGet'
  displayName: 'Install NuGet Tool'

- task: NuGetCommand@2
  name: 'RestoreNuGetPackages'
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    restoreSolution: '$(dotnetSolution)'
    feedsToUse: 'select'

# - task: DotNetCoreCLI@2
#   name: 'RestoreDotnetTools'
#   displayName: 'Restore Dotnet Tools'
#   inputs:
#     command: 'custom'
#     custom: 'tool'
#     arguments: 'restore'

- task: DotNetCoreCLI@2
  name: 'RunTests'
  displayName: 'Run Tests'
  inputs:
    command: 'test'
    projects: '$(dotnetSolution)'
    arguments: '--configuration $(dotnetConfiguration)'

- task: DotNetCoreCLI@2
  name: 'PublishApp'
  displayName: 'Publish Application'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '$(dotnetStartupProject)'
    arguments: '--configuration $(dotnetConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: false

# - task: DotNetCoreCLI@2
#   name: 'CreateSQLScripts'
#   displayName: 'Create SQL Scripts'
#   inputs:
#     command: 'custom'
#     custom: 'ef'
#     arguments: 'migrations script --project $(System.DefaultWorkingDirectory)/src/rentalService/Persistence/Persistence.csproj --context BaseDbContext --startup-project $(dotnetStartupProject) --idempotent --output $(Build.ArtifactStagingDirectory)/SQL/migration.sql -- --environment $(dotnetEnvironmentName)'

- task: PublishBuildArtifacts@1
  name: 'PublishArtifacts'
  displayName: 'Publish Artifacts'